     1                                  
     2                                  ; Objectives: To enocde a given string
     3                                  ; Inputs: String
     4                                  ; Outputs: Encoded string
     5                                  
     6                                  %include "io.mac"
     7                              <1> extern   proc_nwln, proc_PutCh, proc_PutStr
     8                              <1> extern   proc_GetStr, proc_GetCh
     9                              <1> extern   proc_PutInt, proc_GetInt
    10                              <1> extern   proc_PutLInt, proc_GetLInt
    11                              <1> 
    12                              <1> ;;-------------------------------------------------------------------
    13                              <1> %macro  .STARTUP  0
    14                              <1> ;group dgroup .data .bss
    15                              <1>         global   _start
    16                              <1> _start:
    17                              <1> %endmacro
    18                              <1> ;;-------------------------------------------------------------------
    19                              <1> 
    20                              <1> 
    21                              <1> ;;-------------------------------------------------------------------
    22                              <1> %macro  .EXIT  0
    23                              <1>         mov    EAX,1
    24                              <1>         xor    EBX,EBX
    25                              <1>         int    0x80
    26                              <1> %endmacro
    27                              <1> ;;-------------------------------------------------------------------
    28                              <1> 
    29                              <1> 
    30                              <1> ;;-------------------------------------------------------------------
    31                              <1> %macro  .DATA 0
    32                              <1>         segment .data
    33                              <1> %endmacro
    34                              <1> ;;-------------------------------------------------------------------
    35                              <1> 
    36                              <1> ;;-------------------------------------------------------------------
    37                              <1> %macro  .UDATA 0
    38                              <1>         segment .bss
    39                              <1> %endmacro
    40                              <1> ;;-------------------------------------------------------------------
    41                              <1> 
    42                              <1> ;;-------------------------------------------------------------------
    43                              <1> %macro  .CODE 0
    44                              <1>         segment .data
    45                              <1>         segment .bss
    46                              <1>         segment .text
    47                              <1> %endmacro
    48                              <1> ;;-------------------------------------------------------------------
    49                              <1> 
    50                              <1> 
    51                              <1> ;;-------------------------------------------------------------------
    52                              <1> %macro  nwln  0 
    53                              <1>         call    proc_nwln
    54                              <1> %endmacro
    55                              <1> ;;-------------------------------------------------------------------
    56                              <1> 
    57                              <1> 
    58                              <1> ;;-------------------------------------------------------------------
    59                              <1> %macro  PutCh  1 
    60                              <1>         push    AX
    61                              <1>         mov     AL,%1
    62                              <1>         call    proc_PutCh
    63                              <1>         pop     AX
    64                              <1> %endmacro
    65                              <1> ;;-------------------------------------------------------------------
    66                              <1> 
    67                              <1> 
    68                              <1> ;;-------------------------------------------------------------------
    69                              <1> %macro  PutStr  1 
    70                              <1>         push    ECX
    71                              <1>         mov     ECX,%1
    72                              <1>         call    proc_PutStr
    73                              <1>         pop     ECX
    74                              <1> %endmacro
    75                              <1> ;;-------------------------------------------------------------------
    76                              <1> 
    77                              <1> 
    78                              <1> ;;-------------------------------------------------------------------
    79                              <1> %macro  GetStr  1-2 81
    80                              <1>         push    ESI
    81                              <1>         push    EDI
    82                              <1>         mov     EDI,%1
    83                              <1>         mov     ESI,%2
    84                              <1>         call    proc_GetStr
    85                              <1>         pop     EDI
    86                              <1>         pop     ESI
    87                              <1> %endmacro
    88                              <1> ;;-------------------------------------------------------------------
    89                              <1> 
    90                              <1> 
    91                              <1> ;;-------------------------------------------------------------------
    92                              <1> %macro  GetCh   1
    93                              <1>         push    SI
    94                              <1>         xor     SI,SI
    95                              <1> %ifidni %1,AL
    96                              <1>         ;inc     SI
    97                              <1>         call    proc_GetCh
    98                              <1> %elifidni %1,AH
    99                              <1>         mov     SI,1
   100                              <1>         call    proc_GetCh
   101                              <1> %else
   102                              <1>         push    AX
   103                              <1>         call    proc_GetCh
   104                              <1>         mov     %1,AL
   105                              <1>         pop     AX
   106                              <1> %endif
   107                              <1>         pop     SI
   108                              <1> %endmacro
   109                              <1> ;;-------------------------------------------------------------------
   110                              <1> 
   111                              <1> 
   112                              <1> ;;-------------------------------------------------------------------
   113                              <1> %macro  PutInt  1
   114                              <1>         push    AX
   115                              <1>         mov     AX,%1
   116                              <1>         call    proc_PutInt
   117                              <1>         pop     AX
   118                              <1> %endmacro
   119                              <1> ;;-------------------------------------------------------------------
   120                              <1> 
   121                              <1> 
   122                              <1> ;;-------------------------------------------------------------------
   123                              <1> %macro  GetInt  1
   124                              <1> %ifnidni %1,AX
   125                              <1>         push    AX
   126                              <1>         call    proc_GetInt
   127                              <1>         mov     %1,AX
   128                              <1> 	  pop     AX
   129                              <1> %else 
   130                              <1>         call  proc_GetInt
   131                              <1> %endif
   132                              <1> %endmacro
   133                              <1> ;;-------------------------------------------------------------------
   134                              <1> 
   135                              <1> ;;-------------------------------------------------------------------
   136                              <1> %macro  PutLInt  1
   137                              <1>         push    EAX
   138                              <1>         mov     EAX,%1
   139                              <1>         call    proc_PutLInt
   140                              <1>         pop     EAX
   141                              <1> %endmacro
   142                              <1> ;;-------------------------------------------------------------------
   143                              <1> 
   144                              <1> ;;-------------------------------------------------------------------
   145                              <1> %macro  GetLInt  1
   146                              <1> %ifnidni %1,EAX
   147                              <1>         push    EAX
   148                              <1>         call    proc_GetLInt
   149                              <1>         mov     %1,EAX
   150                              <1> 	  pop     EAX
   151                              <1> %else 
   152                              <1>         call  proc_GetLInt
   153                              <1> %endif
   154                              <1> %endmacro
   155                              <1> ;;-------------------------------------------------------------------
   156                              <1> 
   157                                  
   158                                  .DATA
   159                              <1>  segment .data
   160 00000000 506C6561736520696E-     prompt_msg1 db "Please input the string: ",0
   161 00000009 707574207468652073-
   162 00000012 7472696E673A2000   
   163 0000001A 4F7574707574207374-     prompt_msg2 db "Output string: ",0
   164 00000023 72696E673A2000     
   165 0000002A 77616E7420746F2063-     prompt_msg3 db "want to continue: ",0
   166 00000033 6F6E74696E75653A20-
   167 0000003C 00                 
   168                                  
   169                                  .UDATA
   170                              <1>  segment .bss
   171 00000000 <res 00000015>          s resb 21
   172 00000015 <res 00000001>          flag resb 1
   173                                  
   174                                  .CODE
   175                              <1>  segment .data
   176                              <1>  segment .bss
   177                              <1>  segment .text
   178                                  .STARTUP
   179                              <1> 
   180                              <1>  global _start
   181                              <1> _start:
   182                                  l1:
   183                                    PutStr prompt_msg1
   184 00000000 51                  <1>  push ECX
   185 00000001 B9[00000000]        <1>  mov ECX,%1
   186 00000006 E8(00000000)        <1>  call proc_PutStr
   187 0000000B 59                  <1>  pop ECX
   188                                    GetStr s,21
   189 0000000C 56                  <1>  push ESI
   190 0000000D 57                  <1>  push EDI
   191 0000000E BF[00000000]        <1>  mov EDI,%1
   192 00000013 BE15000000          <1>  mov ESI,%2
   193 00000018 E8(00000000)        <1>  call proc_GetStr
   194 0000001D 5F                  <1>  pop EDI
   195 0000001E 5E                  <1>  pop ESI
   196 0000001F BB[00000000]              mov EBX,s
   197                                    PutStr prompt_msg2
   198 00000024 51                  <1>  push ECX
   199 00000025 B9[1A000000]        <1>  mov ECX,%1
   200 0000002A E8(00000000)        <1>  call proc_PutStr
   201 0000002F 59                  <1>  pop ECX
   202                                  
   203                                  process_char:
   204 00000030 8A03                        mov AL,[EBX]
   205 00000032 3C00                        cmp AL,0
   206 00000034 7459                        je l3
   207 00000036 3C30                        cmp AL,'0'
   208 00000038 7448                        je final
   209                                  
   210 0000003A 3C39                        cmp AL,'9'
   211 0000003C 7F44                        jg final
   212                                  
   213 0000003E 3C39                        cmp AL,'9'
   214 00000040 7F2E                        jg encode9
   215                                  
   216 00000042 3C33                        cmp AL,'3'
   217 00000044 7D1B                        jge loop2
   218                                  
   219 00000046 3C30                        cmp AL,'0'
   220 00000048 7D08                        jge loop1
   221                                  
   222 0000004A 3C39                        cmp AL,'9'
   223 0000004C 7C13                        jl loop2
   224                                  
   225 0000004E 3C32                        cmp AL,'2'
   226 00000050 7E00                        jle loop1
   227                                  
   228                                  loop1:
   229 00000052 0428                        add AL,'X'-'0'
   230                                      PutCh AL
   231 00000054 6650                <1>  push AX
   232 00000056 88C0                <1>  mov AL,%1
   233 00000058 E8(00000000)        <1>  call proc_PutCh
   234 0000005D 6658                <1>  pop AX
   235 0000005F EB1E                        jmp print
   236                                  loop2:
   237 00000061 040E                        add AL,'A'-'3'
   238                                      PutCh AL
   239 00000063 6650                <1>  push AX
   240 00000065 88C0                <1>  mov AL,%1
   241 00000067 E8(00000000)        <1>  call proc_PutCh
   242 0000006C 6658                <1>  pop AX
   243 0000006E EB0F                        jmp print
   244                                  encode9:
   245 00000070 B030                      mov AL,'0'
   246                                    PutCh AL
   247 00000072 6650                <1>  push AX
   248 00000074 88C0                <1>  mov AL,%1
   249 00000076 E8(00000000)        <1>  call proc_PutCh
   250 0000007B 6658                <1>  pop AX
   251 0000007D EB00                      jmp print
   252                                  
   253                                  print:
   254 0000007F 43                        inc EBX
   255 00000080 EBAE                      jmp process_char
   256                                  
   257                                  final:
   258                                    PutCh AL
   259 00000082 6650                <1>  push AX
   260 00000084 88C0                <1>  mov AL,%1
   261 00000086 E8(00000000)        <1>  call proc_PutCh
   262 0000008B 6658                <1>  pop AX
   263 0000008D EBF0                      jmp print
   264                                  
   265                                  l3:
   266                                    ;PutStr s
   267                                    nwln
   268 0000008F E8(00000000)        <1>  call proc_nwln
   269                                    PutStr prompt_msg3
   270 00000094 51                  <1>  push ECX
   271 00000095 B9[2A000000]        <1>  mov ECX,%1
   272 0000009A E8(00000000)        <1>  call proc_PutStr
   273 0000009F 59                  <1>  pop ECX
   274                                    GetStr flag,1
   275 000000A0 56                  <1>  push ESI
   276 000000A1 57                  <1>  push EDI
   277 000000A2 BF[15000000]        <1>  mov EDI,%1
   278 000000A7 BE01000000          <1>  mov ESI,%2
   279 000000AC E8(00000000)        <1>  call proc_GetStr
   280 000000B1 5F                  <1>  pop EDI
   281 000000B2 5E                  <1>  pop ESI
   282 000000B3 803D[15000000]79          cmp byte[flag],'y'
   283 000000BA 0F8440FFFFFF              je l1
   284 000000C0 803D[15000000]59          cmp byte[flag],'Y'
   285 000000C7 0F8433FFFFFF              je l1
   286                                  done:
   287                                    .EXIT
   288 000000CD B801000000          <1>  mov EAX,1
   289 000000D2 31DB                <1>  xor EBX,EBX
   290 000000D4 CD80                <1>  int 0x80
